// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/authnz/store/svc/v1/service.proto

package svcv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/goauthnz/contracts/generated/services/authnz/store/svc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthnzStoreSvcName is the fully-qualified name of the AuthnzStoreSvc service.
	AuthnzStoreSvcName = "services.authnz.store.svc.v1.AuthnzStoreSvc"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthnzStoreSvcCreateAccountWithEmailProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// CreateAccountWithEmail RPC.
	AuthnzStoreSvcCreateAccountWithEmailProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/CreateAccountWithEmail"
	// AuthnzStoreSvcCreateAccountWithEmailPasswordProcedure is the fully-qualified name of the
	// AuthnzStoreSvc's CreateAccountWithEmailPassword RPC.
	AuthnzStoreSvcCreateAccountWithEmailPasswordProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/CreateAccountWithEmailPassword"
	// AuthnzStoreSvcCreateAccountWithPhoneProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// CreateAccountWithPhone RPC.
	AuthnzStoreSvcCreateAccountWithPhoneProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/CreateAccountWithPhone"
	// AuthnzStoreSvcCreateAccountWithPhonePasswordProcedure is the fully-qualified name of the
	// AuthnzStoreSvc's CreateAccountWithPhonePassword RPC.
	AuthnzStoreSvcCreateAccountWithPhonePasswordProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/CreateAccountWithPhonePassword"
	// AuthnzStoreSvcSendIdentityVerificationCodeProcedure is the fully-qualified name of the
	// AuthnzStoreSvc's SendIdentityVerificationCode RPC.
	AuthnzStoreSvcSendIdentityVerificationCodeProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/SendIdentityVerificationCode"
	// AuthnzStoreSvcVerifyIdentityProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// VerifyIdentity RPC.
	AuthnzStoreSvcVerifyIdentityProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/VerifyIdentity"
	// AuthnzStoreSvcCreateAccountWithSSOProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// CreateAccountWithSSO RPC.
	AuthnzStoreSvcCreateAccountWithSSOProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/CreateAccountWithSSO"
	// AuthnzStoreSvcGetAccountMFASetupProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// GetAccountMFASetup RPC.
	AuthnzStoreSvcGetAccountMFASetupProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/GetAccountMFASetup"
	// AuthnzStoreSvcEnableAccountMFAProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// EnableAccountMFA RPC.
	AuthnzStoreSvcEnableAccountMFAProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/EnableAccountMFA"
	// AuthnzStoreSvcDisableAccountMFAProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// DisableAccountMFA RPC.
	AuthnzStoreSvcDisableAccountMFAProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/DisableAccountMFA"
	// AuthnzStoreSvcGetAccountByIDProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// GetAccountByID RPC.
	AuthnzStoreSvcGetAccountByIDProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/GetAccountByID"
	// AuthnzStoreSvcGetAccountByIdentityIDProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// GetAccountByIdentityID RPC.
	AuthnzStoreSvcGetAccountByIdentityIDProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/GetAccountByIdentityID"
	// AuthnzStoreSvcGetAccountByEmailProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// GetAccountByEmail RPC.
	AuthnzStoreSvcGetAccountByEmailProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/GetAccountByEmail"
	// AuthnzStoreSvcGetAccountByPhoneProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// GetAccountByPhone RPC.
	AuthnzStoreSvcGetAccountByPhoneProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/GetAccountByPhone"
	// AuthnzStoreSvcGetVerifiedEmailIdentityByEmailProcedure is the fully-qualified name of the
	// AuthnzStoreSvc's GetVerifiedEmailIdentityByEmail RPC.
	AuthnzStoreSvcGetVerifiedEmailIdentityByEmailProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/GetVerifiedEmailIdentityByEmail"
	// AuthnzStoreSvcGetVerifiedPhoneIdentityByPhoneProcedure is the fully-qualified name of the
	// AuthnzStoreSvc's GetVerifiedPhoneIdentityByPhone RPC.
	AuthnzStoreSvcGetVerifiedPhoneIdentityByPhoneProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/GetVerifiedPhoneIdentityByPhone"
	// AuthnzStoreSvcChangeAccountPasswordProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// ChangeAccountPassword RPC.
	AuthnzStoreSvcChangeAccountPasswordProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/ChangeAccountPassword"
	// AuthnzStoreSvcSetAccountPasswordProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// SetAccountPassword RPC.
	AuthnzStoreSvcSetAccountPasswordProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/SetAccountPassword"
	// AuthnzStoreSvcCreateSessionWithEmailPasswordProcedure is the fully-qualified name of the
	// AuthnzStoreSvc's CreateSessionWithEmailPassword RPC.
	AuthnzStoreSvcCreateSessionWithEmailPasswordProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/CreateSessionWithEmailPassword"
	// AuthnzStoreSvcCreateSessionWithPhonePasswordProcedure is the fully-qualified name of the
	// AuthnzStoreSvc's CreateSessionWithPhonePassword RPC.
	AuthnzStoreSvcCreateSessionWithPhonePasswordProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/CreateSessionWithPhonePassword"
	// AuthnzStoreSvcDeleteSessionFromIDProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// DeleteSessionFromID RPC.
	AuthnzStoreSvcDeleteSessionFromIDProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/DeleteSessionFromID"
	// AuthnzStoreSvcGetSessionByIDProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// GetSessionByID RPC.
	AuthnzStoreSvcGetSessionByIDProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/GetSessionByID"
	// AuthnzStoreSvcGetSessionByTokenProcedure is the fully-qualified name of the AuthnzStoreSvc's
	// GetSessionByToken RPC.
	AuthnzStoreSvcGetSessionByTokenProcedure = "/services.authnz.store.svc.v1.AuthnzStoreSvc/GetSessionByToken"
)

// AuthnzStoreSvcClient is a client for the services.authnz.store.svc.v1.AuthnzStoreSvc service.
type AuthnzStoreSvcClient interface {
	CreateAccountWithEmail(context.Context, *connect_go.Request[v1.CreateAccountWithEmailRequest]) (*connect_go.Response[v1.CreateAccountWithEmailResponse], error)
	CreateAccountWithEmailPassword(context.Context, *connect_go.Request[v1.CreateAccountWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateAccountWithEmailPasswordResponse], error)
	CreateAccountWithPhone(context.Context, *connect_go.Request[v1.CreateAccountWithPhoneRequest]) (*connect_go.Response[v1.CreateAccountWithPhoneResponse], error)
	CreateAccountWithPhonePassword(context.Context, *connect_go.Request[v1.CreateAccountWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateAccountWithPhonePasswordResponse], error)
	SendIdentityVerificationCode(context.Context, *connect_go.Request[v1.SendIdentityVerificationCodeRequest]) (*connect_go.Response[v1.SendIdentityVerificationCodeResponse], error)
	VerifyIdentity(context.Context, *connect_go.Request[v1.VerifyIdentityRequest]) (*connect_go.Response[v1.VerifyIdentityResponse], error)
	CreateAccountWithSSO(context.Context, *connect_go.Request[v1.CreateAccountWithSSORequest]) (*connect_go.Response[v1.CreateAccountWithSSOResponse], error)
	GetAccountMFASetup(context.Context, *connect_go.Request[v1.GetAccountMFASetupRequest]) (*connect_go.Response[v1.GetAccountMFASetupResponse], error)
	EnableAccountMFA(context.Context, *connect_go.Request[v1.EnableAccountMFARequest]) (*connect_go.Response[v1.EnableAccountMFAResponse], error)
	DisableAccountMFA(context.Context, *connect_go.Request[v1.DisableAccountMFARequest]) (*connect_go.Response[v1.DisableAccountMFAResponse], error)
	GetAccountByID(context.Context, *connect_go.Request[v1.GetAccountByIDRequest]) (*connect_go.Response[v1.GetAccountByIDResponse], error)
	GetAccountByIdentityID(context.Context, *connect_go.Request[v1.GetAccountByIdentityIDRequest]) (*connect_go.Response[v1.GetAccountByIdentityIDResponse], error)
	GetAccountByEmail(context.Context, *connect_go.Request[v1.GetAccountByEmailRequest]) (*connect_go.Response[v1.GetAccountByEmailResponse], error)
	GetAccountByPhone(context.Context, *connect_go.Request[v1.GetAccountByPhoneRequest]) (*connect_go.Response[v1.GetAccountByPhoneResponse], error)
	GetVerifiedEmailIdentityByEmail(context.Context, *connect_go.Request[v1.GetVerifiedEmailIdentityByEmailRequest]) (*connect_go.Response[v1.GetVerifiedEmailIdentityByEmailResponse], error)
	GetVerifiedPhoneIdentityByPhone(context.Context, *connect_go.Request[v1.GetVerifiedPhoneIdentityByPhoneRequest]) (*connect_go.Response[v1.GetVerifiedPhoneIdentityByPhoneResponse], error)
	ChangeAccountPassword(context.Context, *connect_go.Request[v1.ChangeAccountPasswordRequest]) (*connect_go.Response[v1.ChangeAccountPasswordResponse], error)
	SetAccountPassword(context.Context, *connect_go.Request[v1.SetAccountPasswordRequest]) (*connect_go.Response[v1.SetAccountPasswordResponse], error)
	CreateSessionWithEmailPassword(context.Context, *connect_go.Request[v1.CreateSessionWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateSessionWithEmailPasswordResponse], error)
	CreateSessionWithPhonePassword(context.Context, *connect_go.Request[v1.CreateSessionWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateSessionWithPhonePasswordResponse], error)
	DeleteSessionFromID(context.Context, *connect_go.Request[v1.DeleteSessionFromIDRequest]) (*connect_go.Response[v1.DeleteSessionFromIDResponse], error)
	GetSessionByID(context.Context, *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error)
	GetSessionByToken(context.Context, *connect_go.Request[v1.GetSessionByTokenRequest]) (*connect_go.Response[v1.GetSessionByTokenResponse], error)
}

// NewAuthnzStoreSvcClient constructs a client for the services.authnz.store.svc.v1.AuthnzStoreSvc
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthnzStoreSvcClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthnzStoreSvcClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authnzStoreSvcClient{
		createAccountWithEmail: connect_go.NewClient[v1.CreateAccountWithEmailRequest, v1.CreateAccountWithEmailResponse](
			httpClient,
			baseURL+AuthnzStoreSvcCreateAccountWithEmailProcedure,
			opts...,
		),
		createAccountWithEmailPassword: connect_go.NewClient[v1.CreateAccountWithEmailPasswordRequest, v1.CreateAccountWithEmailPasswordResponse](
			httpClient,
			baseURL+AuthnzStoreSvcCreateAccountWithEmailPasswordProcedure,
			opts...,
		),
		createAccountWithPhone: connect_go.NewClient[v1.CreateAccountWithPhoneRequest, v1.CreateAccountWithPhoneResponse](
			httpClient,
			baseURL+AuthnzStoreSvcCreateAccountWithPhoneProcedure,
			opts...,
		),
		createAccountWithPhonePassword: connect_go.NewClient[v1.CreateAccountWithPhonePasswordRequest, v1.CreateAccountWithPhonePasswordResponse](
			httpClient,
			baseURL+AuthnzStoreSvcCreateAccountWithPhonePasswordProcedure,
			opts...,
		),
		sendIdentityVerificationCode: connect_go.NewClient[v1.SendIdentityVerificationCodeRequest, v1.SendIdentityVerificationCodeResponse](
			httpClient,
			baseURL+AuthnzStoreSvcSendIdentityVerificationCodeProcedure,
			opts...,
		),
		verifyIdentity: connect_go.NewClient[v1.VerifyIdentityRequest, v1.VerifyIdentityResponse](
			httpClient,
			baseURL+AuthnzStoreSvcVerifyIdentityProcedure,
			opts...,
		),
		createAccountWithSSO: connect_go.NewClient[v1.CreateAccountWithSSORequest, v1.CreateAccountWithSSOResponse](
			httpClient,
			baseURL+AuthnzStoreSvcCreateAccountWithSSOProcedure,
			opts...,
		),
		getAccountMFASetup: connect_go.NewClient[v1.GetAccountMFASetupRequest, v1.GetAccountMFASetupResponse](
			httpClient,
			baseURL+AuthnzStoreSvcGetAccountMFASetupProcedure,
			opts...,
		),
		enableAccountMFA: connect_go.NewClient[v1.EnableAccountMFARequest, v1.EnableAccountMFAResponse](
			httpClient,
			baseURL+AuthnzStoreSvcEnableAccountMFAProcedure,
			opts...,
		),
		disableAccountMFA: connect_go.NewClient[v1.DisableAccountMFARequest, v1.DisableAccountMFAResponse](
			httpClient,
			baseURL+AuthnzStoreSvcDisableAccountMFAProcedure,
			opts...,
		),
		getAccountByID: connect_go.NewClient[v1.GetAccountByIDRequest, v1.GetAccountByIDResponse](
			httpClient,
			baseURL+AuthnzStoreSvcGetAccountByIDProcedure,
			opts...,
		),
		getAccountByIdentityID: connect_go.NewClient[v1.GetAccountByIdentityIDRequest, v1.GetAccountByIdentityIDResponse](
			httpClient,
			baseURL+AuthnzStoreSvcGetAccountByIdentityIDProcedure,
			opts...,
		),
		getAccountByEmail: connect_go.NewClient[v1.GetAccountByEmailRequest, v1.GetAccountByEmailResponse](
			httpClient,
			baseURL+AuthnzStoreSvcGetAccountByEmailProcedure,
			opts...,
		),
		getAccountByPhone: connect_go.NewClient[v1.GetAccountByPhoneRequest, v1.GetAccountByPhoneResponse](
			httpClient,
			baseURL+AuthnzStoreSvcGetAccountByPhoneProcedure,
			opts...,
		),
		getVerifiedEmailIdentityByEmail: connect_go.NewClient[v1.GetVerifiedEmailIdentityByEmailRequest, v1.GetVerifiedEmailIdentityByEmailResponse](
			httpClient,
			baseURL+AuthnzStoreSvcGetVerifiedEmailIdentityByEmailProcedure,
			opts...,
		),
		getVerifiedPhoneIdentityByPhone: connect_go.NewClient[v1.GetVerifiedPhoneIdentityByPhoneRequest, v1.GetVerifiedPhoneIdentityByPhoneResponse](
			httpClient,
			baseURL+AuthnzStoreSvcGetVerifiedPhoneIdentityByPhoneProcedure,
			opts...,
		),
		changeAccountPassword: connect_go.NewClient[v1.ChangeAccountPasswordRequest, v1.ChangeAccountPasswordResponse](
			httpClient,
			baseURL+AuthnzStoreSvcChangeAccountPasswordProcedure,
			opts...,
		),
		setAccountPassword: connect_go.NewClient[v1.SetAccountPasswordRequest, v1.SetAccountPasswordResponse](
			httpClient,
			baseURL+AuthnzStoreSvcSetAccountPasswordProcedure,
			opts...,
		),
		createSessionWithEmailPassword: connect_go.NewClient[v1.CreateSessionWithEmailPasswordRequest, v1.CreateSessionWithEmailPasswordResponse](
			httpClient,
			baseURL+AuthnzStoreSvcCreateSessionWithEmailPasswordProcedure,
			opts...,
		),
		createSessionWithPhonePassword: connect_go.NewClient[v1.CreateSessionWithPhonePasswordRequest, v1.CreateSessionWithPhonePasswordResponse](
			httpClient,
			baseURL+AuthnzStoreSvcCreateSessionWithPhonePasswordProcedure,
			opts...,
		),
		deleteSessionFromID: connect_go.NewClient[v1.DeleteSessionFromIDRequest, v1.DeleteSessionFromIDResponse](
			httpClient,
			baseURL+AuthnzStoreSvcDeleteSessionFromIDProcedure,
			opts...,
		),
		getSessionByID: connect_go.NewClient[v1.GetSessionByIDRequest, v1.GetSessionByIDResponse](
			httpClient,
			baseURL+AuthnzStoreSvcGetSessionByIDProcedure,
			opts...,
		),
		getSessionByToken: connect_go.NewClient[v1.GetSessionByTokenRequest, v1.GetSessionByTokenResponse](
			httpClient,
			baseURL+AuthnzStoreSvcGetSessionByTokenProcedure,
			opts...,
		),
	}
}

// authnzStoreSvcClient implements AuthnzStoreSvcClient.
type authnzStoreSvcClient struct {
	createAccountWithEmail          *connect_go.Client[v1.CreateAccountWithEmailRequest, v1.CreateAccountWithEmailResponse]
	createAccountWithEmailPassword  *connect_go.Client[v1.CreateAccountWithEmailPasswordRequest, v1.CreateAccountWithEmailPasswordResponse]
	createAccountWithPhone          *connect_go.Client[v1.CreateAccountWithPhoneRequest, v1.CreateAccountWithPhoneResponse]
	createAccountWithPhonePassword  *connect_go.Client[v1.CreateAccountWithPhonePasswordRequest, v1.CreateAccountWithPhonePasswordResponse]
	sendIdentityVerificationCode    *connect_go.Client[v1.SendIdentityVerificationCodeRequest, v1.SendIdentityVerificationCodeResponse]
	verifyIdentity                  *connect_go.Client[v1.VerifyIdentityRequest, v1.VerifyIdentityResponse]
	createAccountWithSSO            *connect_go.Client[v1.CreateAccountWithSSORequest, v1.CreateAccountWithSSOResponse]
	getAccountMFASetup              *connect_go.Client[v1.GetAccountMFASetupRequest, v1.GetAccountMFASetupResponse]
	enableAccountMFA                *connect_go.Client[v1.EnableAccountMFARequest, v1.EnableAccountMFAResponse]
	disableAccountMFA               *connect_go.Client[v1.DisableAccountMFARequest, v1.DisableAccountMFAResponse]
	getAccountByID                  *connect_go.Client[v1.GetAccountByIDRequest, v1.GetAccountByIDResponse]
	getAccountByIdentityID          *connect_go.Client[v1.GetAccountByIdentityIDRequest, v1.GetAccountByIdentityIDResponse]
	getAccountByEmail               *connect_go.Client[v1.GetAccountByEmailRequest, v1.GetAccountByEmailResponse]
	getAccountByPhone               *connect_go.Client[v1.GetAccountByPhoneRequest, v1.GetAccountByPhoneResponse]
	getVerifiedEmailIdentityByEmail *connect_go.Client[v1.GetVerifiedEmailIdentityByEmailRequest, v1.GetVerifiedEmailIdentityByEmailResponse]
	getVerifiedPhoneIdentityByPhone *connect_go.Client[v1.GetVerifiedPhoneIdentityByPhoneRequest, v1.GetVerifiedPhoneIdentityByPhoneResponse]
	changeAccountPassword           *connect_go.Client[v1.ChangeAccountPasswordRequest, v1.ChangeAccountPasswordResponse]
	setAccountPassword              *connect_go.Client[v1.SetAccountPasswordRequest, v1.SetAccountPasswordResponse]
	createSessionWithEmailPassword  *connect_go.Client[v1.CreateSessionWithEmailPasswordRequest, v1.CreateSessionWithEmailPasswordResponse]
	createSessionWithPhonePassword  *connect_go.Client[v1.CreateSessionWithPhonePasswordRequest, v1.CreateSessionWithPhonePasswordResponse]
	deleteSessionFromID             *connect_go.Client[v1.DeleteSessionFromIDRequest, v1.DeleteSessionFromIDResponse]
	getSessionByID                  *connect_go.Client[v1.GetSessionByIDRequest, v1.GetSessionByIDResponse]
	getSessionByToken               *connect_go.Client[v1.GetSessionByTokenRequest, v1.GetSessionByTokenResponse]
}

// CreateAccountWithEmail calls services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithEmail.
func (c *authnzStoreSvcClient) CreateAccountWithEmail(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithEmailRequest]) (*connect_go.Response[v1.CreateAccountWithEmailResponse], error) {
	return c.createAccountWithEmail.CallUnary(ctx, req)
}

// CreateAccountWithEmailPassword calls
// services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithEmailPassword.
func (c *authnzStoreSvcClient) CreateAccountWithEmailPassword(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateAccountWithEmailPasswordResponse], error) {
	return c.createAccountWithEmailPassword.CallUnary(ctx, req)
}

// CreateAccountWithPhone calls services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithPhone.
func (c *authnzStoreSvcClient) CreateAccountWithPhone(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithPhoneRequest]) (*connect_go.Response[v1.CreateAccountWithPhoneResponse], error) {
	return c.createAccountWithPhone.CallUnary(ctx, req)
}

// CreateAccountWithPhonePassword calls
// services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithPhonePassword.
func (c *authnzStoreSvcClient) CreateAccountWithPhonePassword(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateAccountWithPhonePasswordResponse], error) {
	return c.createAccountWithPhonePassword.CallUnary(ctx, req)
}

// SendIdentityVerificationCode calls
// services.authnz.store.svc.v1.AuthnzStoreSvc.SendIdentityVerificationCode.
func (c *authnzStoreSvcClient) SendIdentityVerificationCode(ctx context.Context, req *connect_go.Request[v1.SendIdentityVerificationCodeRequest]) (*connect_go.Response[v1.SendIdentityVerificationCodeResponse], error) {
	return c.sendIdentityVerificationCode.CallUnary(ctx, req)
}

// VerifyIdentity calls services.authnz.store.svc.v1.AuthnzStoreSvc.VerifyIdentity.
func (c *authnzStoreSvcClient) VerifyIdentity(ctx context.Context, req *connect_go.Request[v1.VerifyIdentityRequest]) (*connect_go.Response[v1.VerifyIdentityResponse], error) {
	return c.verifyIdentity.CallUnary(ctx, req)
}

// CreateAccountWithSSO calls services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithSSO.
func (c *authnzStoreSvcClient) CreateAccountWithSSO(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithSSORequest]) (*connect_go.Response[v1.CreateAccountWithSSOResponse], error) {
	return c.createAccountWithSSO.CallUnary(ctx, req)
}

// GetAccountMFASetup calls services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountMFASetup.
func (c *authnzStoreSvcClient) GetAccountMFASetup(ctx context.Context, req *connect_go.Request[v1.GetAccountMFASetupRequest]) (*connect_go.Response[v1.GetAccountMFASetupResponse], error) {
	return c.getAccountMFASetup.CallUnary(ctx, req)
}

// EnableAccountMFA calls services.authnz.store.svc.v1.AuthnzStoreSvc.EnableAccountMFA.
func (c *authnzStoreSvcClient) EnableAccountMFA(ctx context.Context, req *connect_go.Request[v1.EnableAccountMFARequest]) (*connect_go.Response[v1.EnableAccountMFAResponse], error) {
	return c.enableAccountMFA.CallUnary(ctx, req)
}

// DisableAccountMFA calls services.authnz.store.svc.v1.AuthnzStoreSvc.DisableAccountMFA.
func (c *authnzStoreSvcClient) DisableAccountMFA(ctx context.Context, req *connect_go.Request[v1.DisableAccountMFARequest]) (*connect_go.Response[v1.DisableAccountMFAResponse], error) {
	return c.disableAccountMFA.CallUnary(ctx, req)
}

// GetAccountByID calls services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountByID.
func (c *authnzStoreSvcClient) GetAccountByID(ctx context.Context, req *connect_go.Request[v1.GetAccountByIDRequest]) (*connect_go.Response[v1.GetAccountByIDResponse], error) {
	return c.getAccountByID.CallUnary(ctx, req)
}

// GetAccountByIdentityID calls services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountByIdentityID.
func (c *authnzStoreSvcClient) GetAccountByIdentityID(ctx context.Context, req *connect_go.Request[v1.GetAccountByIdentityIDRequest]) (*connect_go.Response[v1.GetAccountByIdentityIDResponse], error) {
	return c.getAccountByIdentityID.CallUnary(ctx, req)
}

// GetAccountByEmail calls services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountByEmail.
func (c *authnzStoreSvcClient) GetAccountByEmail(ctx context.Context, req *connect_go.Request[v1.GetAccountByEmailRequest]) (*connect_go.Response[v1.GetAccountByEmailResponse], error) {
	return c.getAccountByEmail.CallUnary(ctx, req)
}

// GetAccountByPhone calls services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountByPhone.
func (c *authnzStoreSvcClient) GetAccountByPhone(ctx context.Context, req *connect_go.Request[v1.GetAccountByPhoneRequest]) (*connect_go.Response[v1.GetAccountByPhoneResponse], error) {
	return c.getAccountByPhone.CallUnary(ctx, req)
}

// GetVerifiedEmailIdentityByEmail calls
// services.authnz.store.svc.v1.AuthnzStoreSvc.GetVerifiedEmailIdentityByEmail.
func (c *authnzStoreSvcClient) GetVerifiedEmailIdentityByEmail(ctx context.Context, req *connect_go.Request[v1.GetVerifiedEmailIdentityByEmailRequest]) (*connect_go.Response[v1.GetVerifiedEmailIdentityByEmailResponse], error) {
	return c.getVerifiedEmailIdentityByEmail.CallUnary(ctx, req)
}

// GetVerifiedPhoneIdentityByPhone calls
// services.authnz.store.svc.v1.AuthnzStoreSvc.GetVerifiedPhoneIdentityByPhone.
func (c *authnzStoreSvcClient) GetVerifiedPhoneIdentityByPhone(ctx context.Context, req *connect_go.Request[v1.GetVerifiedPhoneIdentityByPhoneRequest]) (*connect_go.Response[v1.GetVerifiedPhoneIdentityByPhoneResponse], error) {
	return c.getVerifiedPhoneIdentityByPhone.CallUnary(ctx, req)
}

// ChangeAccountPassword calls services.authnz.store.svc.v1.AuthnzStoreSvc.ChangeAccountPassword.
func (c *authnzStoreSvcClient) ChangeAccountPassword(ctx context.Context, req *connect_go.Request[v1.ChangeAccountPasswordRequest]) (*connect_go.Response[v1.ChangeAccountPasswordResponse], error) {
	return c.changeAccountPassword.CallUnary(ctx, req)
}

// SetAccountPassword calls services.authnz.store.svc.v1.AuthnzStoreSvc.SetAccountPassword.
func (c *authnzStoreSvcClient) SetAccountPassword(ctx context.Context, req *connect_go.Request[v1.SetAccountPasswordRequest]) (*connect_go.Response[v1.SetAccountPasswordResponse], error) {
	return c.setAccountPassword.CallUnary(ctx, req)
}

// CreateSessionWithEmailPassword calls
// services.authnz.store.svc.v1.AuthnzStoreSvc.CreateSessionWithEmailPassword.
func (c *authnzStoreSvcClient) CreateSessionWithEmailPassword(ctx context.Context, req *connect_go.Request[v1.CreateSessionWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateSessionWithEmailPasswordResponse], error) {
	return c.createSessionWithEmailPassword.CallUnary(ctx, req)
}

// CreateSessionWithPhonePassword calls
// services.authnz.store.svc.v1.AuthnzStoreSvc.CreateSessionWithPhonePassword.
func (c *authnzStoreSvcClient) CreateSessionWithPhonePassword(ctx context.Context, req *connect_go.Request[v1.CreateSessionWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateSessionWithPhonePasswordResponse], error) {
	return c.createSessionWithPhonePassword.CallUnary(ctx, req)
}

// DeleteSessionFromID calls services.authnz.store.svc.v1.AuthnzStoreSvc.DeleteSessionFromID.
func (c *authnzStoreSvcClient) DeleteSessionFromID(ctx context.Context, req *connect_go.Request[v1.DeleteSessionFromIDRequest]) (*connect_go.Response[v1.DeleteSessionFromIDResponse], error) {
	return c.deleteSessionFromID.CallUnary(ctx, req)
}

// GetSessionByID calls services.authnz.store.svc.v1.AuthnzStoreSvc.GetSessionByID.
func (c *authnzStoreSvcClient) GetSessionByID(ctx context.Context, req *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error) {
	return c.getSessionByID.CallUnary(ctx, req)
}

// GetSessionByToken calls services.authnz.store.svc.v1.AuthnzStoreSvc.GetSessionByToken.
func (c *authnzStoreSvcClient) GetSessionByToken(ctx context.Context, req *connect_go.Request[v1.GetSessionByTokenRequest]) (*connect_go.Response[v1.GetSessionByTokenResponse], error) {
	return c.getSessionByToken.CallUnary(ctx, req)
}

// AuthnzStoreSvcHandler is an implementation of the services.authnz.store.svc.v1.AuthnzStoreSvc
// service.
type AuthnzStoreSvcHandler interface {
	CreateAccountWithEmail(context.Context, *connect_go.Request[v1.CreateAccountWithEmailRequest]) (*connect_go.Response[v1.CreateAccountWithEmailResponse], error)
	CreateAccountWithEmailPassword(context.Context, *connect_go.Request[v1.CreateAccountWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateAccountWithEmailPasswordResponse], error)
	CreateAccountWithPhone(context.Context, *connect_go.Request[v1.CreateAccountWithPhoneRequest]) (*connect_go.Response[v1.CreateAccountWithPhoneResponse], error)
	CreateAccountWithPhonePassword(context.Context, *connect_go.Request[v1.CreateAccountWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateAccountWithPhonePasswordResponse], error)
	SendIdentityVerificationCode(context.Context, *connect_go.Request[v1.SendIdentityVerificationCodeRequest]) (*connect_go.Response[v1.SendIdentityVerificationCodeResponse], error)
	VerifyIdentity(context.Context, *connect_go.Request[v1.VerifyIdentityRequest]) (*connect_go.Response[v1.VerifyIdentityResponse], error)
	CreateAccountWithSSO(context.Context, *connect_go.Request[v1.CreateAccountWithSSORequest]) (*connect_go.Response[v1.CreateAccountWithSSOResponse], error)
	GetAccountMFASetup(context.Context, *connect_go.Request[v1.GetAccountMFASetupRequest]) (*connect_go.Response[v1.GetAccountMFASetupResponse], error)
	EnableAccountMFA(context.Context, *connect_go.Request[v1.EnableAccountMFARequest]) (*connect_go.Response[v1.EnableAccountMFAResponse], error)
	DisableAccountMFA(context.Context, *connect_go.Request[v1.DisableAccountMFARequest]) (*connect_go.Response[v1.DisableAccountMFAResponse], error)
	GetAccountByID(context.Context, *connect_go.Request[v1.GetAccountByIDRequest]) (*connect_go.Response[v1.GetAccountByIDResponse], error)
	GetAccountByIdentityID(context.Context, *connect_go.Request[v1.GetAccountByIdentityIDRequest]) (*connect_go.Response[v1.GetAccountByIdentityIDResponse], error)
	GetAccountByEmail(context.Context, *connect_go.Request[v1.GetAccountByEmailRequest]) (*connect_go.Response[v1.GetAccountByEmailResponse], error)
	GetAccountByPhone(context.Context, *connect_go.Request[v1.GetAccountByPhoneRequest]) (*connect_go.Response[v1.GetAccountByPhoneResponse], error)
	GetVerifiedEmailIdentityByEmail(context.Context, *connect_go.Request[v1.GetVerifiedEmailIdentityByEmailRequest]) (*connect_go.Response[v1.GetVerifiedEmailIdentityByEmailResponse], error)
	GetVerifiedPhoneIdentityByPhone(context.Context, *connect_go.Request[v1.GetVerifiedPhoneIdentityByPhoneRequest]) (*connect_go.Response[v1.GetVerifiedPhoneIdentityByPhoneResponse], error)
	ChangeAccountPassword(context.Context, *connect_go.Request[v1.ChangeAccountPasswordRequest]) (*connect_go.Response[v1.ChangeAccountPasswordResponse], error)
	SetAccountPassword(context.Context, *connect_go.Request[v1.SetAccountPasswordRequest]) (*connect_go.Response[v1.SetAccountPasswordResponse], error)
	CreateSessionWithEmailPassword(context.Context, *connect_go.Request[v1.CreateSessionWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateSessionWithEmailPasswordResponse], error)
	CreateSessionWithPhonePassword(context.Context, *connect_go.Request[v1.CreateSessionWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateSessionWithPhonePasswordResponse], error)
	DeleteSessionFromID(context.Context, *connect_go.Request[v1.DeleteSessionFromIDRequest]) (*connect_go.Response[v1.DeleteSessionFromIDResponse], error)
	GetSessionByID(context.Context, *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error)
	GetSessionByToken(context.Context, *connect_go.Request[v1.GetSessionByTokenRequest]) (*connect_go.Response[v1.GetSessionByTokenResponse], error)
}

// NewAuthnzStoreSvcHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthnzStoreSvcHandler(svc AuthnzStoreSvcHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	authnzStoreSvcCreateAccountWithEmailHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcCreateAccountWithEmailProcedure,
		svc.CreateAccountWithEmail,
		opts...,
	)
	authnzStoreSvcCreateAccountWithEmailPasswordHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcCreateAccountWithEmailPasswordProcedure,
		svc.CreateAccountWithEmailPassword,
		opts...,
	)
	authnzStoreSvcCreateAccountWithPhoneHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcCreateAccountWithPhoneProcedure,
		svc.CreateAccountWithPhone,
		opts...,
	)
	authnzStoreSvcCreateAccountWithPhonePasswordHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcCreateAccountWithPhonePasswordProcedure,
		svc.CreateAccountWithPhonePassword,
		opts...,
	)
	authnzStoreSvcSendIdentityVerificationCodeHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcSendIdentityVerificationCodeProcedure,
		svc.SendIdentityVerificationCode,
		opts...,
	)
	authnzStoreSvcVerifyIdentityHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcVerifyIdentityProcedure,
		svc.VerifyIdentity,
		opts...,
	)
	authnzStoreSvcCreateAccountWithSSOHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcCreateAccountWithSSOProcedure,
		svc.CreateAccountWithSSO,
		opts...,
	)
	authnzStoreSvcGetAccountMFASetupHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcGetAccountMFASetupProcedure,
		svc.GetAccountMFASetup,
		opts...,
	)
	authnzStoreSvcEnableAccountMFAHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcEnableAccountMFAProcedure,
		svc.EnableAccountMFA,
		opts...,
	)
	authnzStoreSvcDisableAccountMFAHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcDisableAccountMFAProcedure,
		svc.DisableAccountMFA,
		opts...,
	)
	authnzStoreSvcGetAccountByIDHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcGetAccountByIDProcedure,
		svc.GetAccountByID,
		opts...,
	)
	authnzStoreSvcGetAccountByIdentityIDHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcGetAccountByIdentityIDProcedure,
		svc.GetAccountByIdentityID,
		opts...,
	)
	authnzStoreSvcGetAccountByEmailHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcGetAccountByEmailProcedure,
		svc.GetAccountByEmail,
		opts...,
	)
	authnzStoreSvcGetAccountByPhoneHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcGetAccountByPhoneProcedure,
		svc.GetAccountByPhone,
		opts...,
	)
	authnzStoreSvcGetVerifiedEmailIdentityByEmailHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcGetVerifiedEmailIdentityByEmailProcedure,
		svc.GetVerifiedEmailIdentityByEmail,
		opts...,
	)
	authnzStoreSvcGetVerifiedPhoneIdentityByPhoneHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcGetVerifiedPhoneIdentityByPhoneProcedure,
		svc.GetVerifiedPhoneIdentityByPhone,
		opts...,
	)
	authnzStoreSvcChangeAccountPasswordHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcChangeAccountPasswordProcedure,
		svc.ChangeAccountPassword,
		opts...,
	)
	authnzStoreSvcSetAccountPasswordHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcSetAccountPasswordProcedure,
		svc.SetAccountPassword,
		opts...,
	)
	authnzStoreSvcCreateSessionWithEmailPasswordHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcCreateSessionWithEmailPasswordProcedure,
		svc.CreateSessionWithEmailPassword,
		opts...,
	)
	authnzStoreSvcCreateSessionWithPhonePasswordHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcCreateSessionWithPhonePasswordProcedure,
		svc.CreateSessionWithPhonePassword,
		opts...,
	)
	authnzStoreSvcDeleteSessionFromIDHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcDeleteSessionFromIDProcedure,
		svc.DeleteSessionFromID,
		opts...,
	)
	authnzStoreSvcGetSessionByIDHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcGetSessionByIDProcedure,
		svc.GetSessionByID,
		opts...,
	)
	authnzStoreSvcGetSessionByTokenHandler := connect_go.NewUnaryHandler(
		AuthnzStoreSvcGetSessionByTokenProcedure,
		svc.GetSessionByToken,
		opts...,
	)
	return "/services.authnz.store.svc.v1.AuthnzStoreSvc/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthnzStoreSvcCreateAccountWithEmailProcedure:
			authnzStoreSvcCreateAccountWithEmailHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcCreateAccountWithEmailPasswordProcedure:
			authnzStoreSvcCreateAccountWithEmailPasswordHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcCreateAccountWithPhoneProcedure:
			authnzStoreSvcCreateAccountWithPhoneHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcCreateAccountWithPhonePasswordProcedure:
			authnzStoreSvcCreateAccountWithPhonePasswordHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcSendIdentityVerificationCodeProcedure:
			authnzStoreSvcSendIdentityVerificationCodeHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcVerifyIdentityProcedure:
			authnzStoreSvcVerifyIdentityHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcCreateAccountWithSSOProcedure:
			authnzStoreSvcCreateAccountWithSSOHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcGetAccountMFASetupProcedure:
			authnzStoreSvcGetAccountMFASetupHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcEnableAccountMFAProcedure:
			authnzStoreSvcEnableAccountMFAHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcDisableAccountMFAProcedure:
			authnzStoreSvcDisableAccountMFAHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcGetAccountByIDProcedure:
			authnzStoreSvcGetAccountByIDHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcGetAccountByIdentityIDProcedure:
			authnzStoreSvcGetAccountByIdentityIDHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcGetAccountByEmailProcedure:
			authnzStoreSvcGetAccountByEmailHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcGetAccountByPhoneProcedure:
			authnzStoreSvcGetAccountByPhoneHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcGetVerifiedEmailIdentityByEmailProcedure:
			authnzStoreSvcGetVerifiedEmailIdentityByEmailHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcGetVerifiedPhoneIdentityByPhoneProcedure:
			authnzStoreSvcGetVerifiedPhoneIdentityByPhoneHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcChangeAccountPasswordProcedure:
			authnzStoreSvcChangeAccountPasswordHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcSetAccountPasswordProcedure:
			authnzStoreSvcSetAccountPasswordHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcCreateSessionWithEmailPasswordProcedure:
			authnzStoreSvcCreateSessionWithEmailPasswordHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcCreateSessionWithPhonePasswordProcedure:
			authnzStoreSvcCreateSessionWithPhonePasswordHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcDeleteSessionFromIDProcedure:
			authnzStoreSvcDeleteSessionFromIDHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcGetSessionByIDProcedure:
			authnzStoreSvcGetSessionByIDHandler.ServeHTTP(w, r)
		case AuthnzStoreSvcGetSessionByTokenProcedure:
			authnzStoreSvcGetSessionByTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthnzStoreSvcHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthnzStoreSvcHandler struct{}

func (UnimplementedAuthnzStoreSvcHandler) CreateAccountWithEmail(context.Context, *connect_go.Request[v1.CreateAccountWithEmailRequest]) (*connect_go.Response[v1.CreateAccountWithEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithEmail is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) CreateAccountWithEmailPassword(context.Context, *connect_go.Request[v1.CreateAccountWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateAccountWithEmailPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithEmailPassword is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) CreateAccountWithPhone(context.Context, *connect_go.Request[v1.CreateAccountWithPhoneRequest]) (*connect_go.Response[v1.CreateAccountWithPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithPhone is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) CreateAccountWithPhonePassword(context.Context, *connect_go.Request[v1.CreateAccountWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateAccountWithPhonePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithPhonePassword is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) SendIdentityVerificationCode(context.Context, *connect_go.Request[v1.SendIdentityVerificationCodeRequest]) (*connect_go.Response[v1.SendIdentityVerificationCodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.SendIdentityVerificationCode is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) VerifyIdentity(context.Context, *connect_go.Request[v1.VerifyIdentityRequest]) (*connect_go.Response[v1.VerifyIdentityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.VerifyIdentity is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) CreateAccountWithSSO(context.Context, *connect_go.Request[v1.CreateAccountWithSSORequest]) (*connect_go.Response[v1.CreateAccountWithSSOResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.CreateAccountWithSSO is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) GetAccountMFASetup(context.Context, *connect_go.Request[v1.GetAccountMFASetupRequest]) (*connect_go.Response[v1.GetAccountMFASetupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountMFASetup is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) EnableAccountMFA(context.Context, *connect_go.Request[v1.EnableAccountMFARequest]) (*connect_go.Response[v1.EnableAccountMFAResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.EnableAccountMFA is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) DisableAccountMFA(context.Context, *connect_go.Request[v1.DisableAccountMFARequest]) (*connect_go.Response[v1.DisableAccountMFAResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.DisableAccountMFA is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) GetAccountByID(context.Context, *connect_go.Request[v1.GetAccountByIDRequest]) (*connect_go.Response[v1.GetAccountByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountByID is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) GetAccountByIdentityID(context.Context, *connect_go.Request[v1.GetAccountByIdentityIDRequest]) (*connect_go.Response[v1.GetAccountByIdentityIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountByIdentityID is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) GetAccountByEmail(context.Context, *connect_go.Request[v1.GetAccountByEmailRequest]) (*connect_go.Response[v1.GetAccountByEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountByEmail is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) GetAccountByPhone(context.Context, *connect_go.Request[v1.GetAccountByPhoneRequest]) (*connect_go.Response[v1.GetAccountByPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.GetAccountByPhone is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) GetVerifiedEmailIdentityByEmail(context.Context, *connect_go.Request[v1.GetVerifiedEmailIdentityByEmailRequest]) (*connect_go.Response[v1.GetVerifiedEmailIdentityByEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.GetVerifiedEmailIdentityByEmail is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) GetVerifiedPhoneIdentityByPhone(context.Context, *connect_go.Request[v1.GetVerifiedPhoneIdentityByPhoneRequest]) (*connect_go.Response[v1.GetVerifiedPhoneIdentityByPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.GetVerifiedPhoneIdentityByPhone is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) ChangeAccountPassword(context.Context, *connect_go.Request[v1.ChangeAccountPasswordRequest]) (*connect_go.Response[v1.ChangeAccountPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.ChangeAccountPassword is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) SetAccountPassword(context.Context, *connect_go.Request[v1.SetAccountPasswordRequest]) (*connect_go.Response[v1.SetAccountPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.SetAccountPassword is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) CreateSessionWithEmailPassword(context.Context, *connect_go.Request[v1.CreateSessionWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateSessionWithEmailPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.CreateSessionWithEmailPassword is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) CreateSessionWithPhonePassword(context.Context, *connect_go.Request[v1.CreateSessionWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateSessionWithPhonePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.CreateSessionWithPhonePassword is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) DeleteSessionFromID(context.Context, *connect_go.Request[v1.DeleteSessionFromIDRequest]) (*connect_go.Response[v1.DeleteSessionFromIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.DeleteSessionFromID is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) GetSessionByID(context.Context, *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.GetSessionByID is not implemented"))
}

func (UnimplementedAuthnzStoreSvcHandler) GetSessionByToken(context.Context, *connect_go.Request[v1.GetSessionByTokenRequest]) (*connect_go.Response[v1.GetSessionByTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.authnz.store.svc.v1.AuthnzStoreSvc.GetSessionByToken is not implemented"))
}
