// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/ptfm/auth/svc/v1/service.proto

package svcv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/goauthnz/contracts/generated/services/ptfm/auth/svc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PtfmAuthSvcName is the fully-qualified name of the PtfmAuthSvc service.
	PtfmAuthSvcName = "services.ptfm.auth.svc.v1.PtfmAuthSvc"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PtfmAuthSvcCreateAccountWithEmailProcedure is the fully-qualified name of the PtfmAuthSvc's
	// CreateAccountWithEmail RPC.
	PtfmAuthSvcCreateAccountWithEmailProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/CreateAccountWithEmail"
	// PtfmAuthSvcCreateAccountWithEmailPasswordProcedure is the fully-qualified name of the
	// PtfmAuthSvc's CreateAccountWithEmailPassword RPC.
	PtfmAuthSvcCreateAccountWithEmailPasswordProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/CreateAccountWithEmailPassword"
	// PtfmAuthSvcCreateAccountWithPhoneProcedure is the fully-qualified name of the PtfmAuthSvc's
	// CreateAccountWithPhone RPC.
	PtfmAuthSvcCreateAccountWithPhoneProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/CreateAccountWithPhone"
	// PtfmAuthSvcCreateAccountWithPhonePasswordProcedure is the fully-qualified name of the
	// PtfmAuthSvc's CreateAccountWithPhonePassword RPC.
	PtfmAuthSvcCreateAccountWithPhonePasswordProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/CreateAccountWithPhonePassword"
	// PtfmAuthSvcSendIdentityVerificationCodeProcedure is the fully-qualified name of the PtfmAuthSvc's
	// SendIdentityVerificationCode RPC.
	PtfmAuthSvcSendIdentityVerificationCodeProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/SendIdentityVerificationCode"
	// PtfmAuthSvcVerifyIdentityProcedure is the fully-qualified name of the PtfmAuthSvc's
	// VerifyIdentity RPC.
	PtfmAuthSvcVerifyIdentityProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/VerifyIdentity"
	// PtfmAuthSvcCreateAccountWithSSOProcedure is the fully-qualified name of the PtfmAuthSvc's
	// CreateAccountWithSSO RPC.
	PtfmAuthSvcCreateAccountWithSSOProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/CreateAccountWithSSO"
	// PtfmAuthSvcGetAccountMFASetupProcedure is the fully-qualified name of the PtfmAuthSvc's
	// GetAccountMFASetup RPC.
	PtfmAuthSvcGetAccountMFASetupProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/GetAccountMFASetup"
	// PtfmAuthSvcEnableAccountMFAProcedure is the fully-qualified name of the PtfmAuthSvc's
	// EnableAccountMFA RPC.
	PtfmAuthSvcEnableAccountMFAProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/EnableAccountMFA"
	// PtfmAuthSvcDisableAccountMFAProcedure is the fully-qualified name of the PtfmAuthSvc's
	// DisableAccountMFA RPC.
	PtfmAuthSvcDisableAccountMFAProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/DisableAccountMFA"
	// PtfmAuthSvcGetAccountByIDProcedure is the fully-qualified name of the PtfmAuthSvc's
	// GetAccountByID RPC.
	PtfmAuthSvcGetAccountByIDProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/GetAccountByID"
	// PtfmAuthSvcGetAccountByIdentityIDProcedure is the fully-qualified name of the PtfmAuthSvc's
	// GetAccountByIdentityID RPC.
	PtfmAuthSvcGetAccountByIdentityIDProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/GetAccountByIdentityID"
	// PtfmAuthSvcGetAccountByEmailProcedure is the fully-qualified name of the PtfmAuthSvc's
	// GetAccountByEmail RPC.
	PtfmAuthSvcGetAccountByEmailProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/GetAccountByEmail"
	// PtfmAuthSvcGetAccountByPhoneProcedure is the fully-qualified name of the PtfmAuthSvc's
	// GetAccountByPhone RPC.
	PtfmAuthSvcGetAccountByPhoneProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/GetAccountByPhone"
	// PtfmAuthSvcGetVerifiedEmailIdentityByEmailProcedure is the fully-qualified name of the
	// PtfmAuthSvc's GetVerifiedEmailIdentityByEmail RPC.
	PtfmAuthSvcGetVerifiedEmailIdentityByEmailProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/GetVerifiedEmailIdentityByEmail"
	// PtfmAuthSvcGetVerifiedPhoneIdentityByPhoneProcedure is the fully-qualified name of the
	// PtfmAuthSvc's GetVerifiedPhoneIdentityByPhone RPC.
	PtfmAuthSvcGetVerifiedPhoneIdentityByPhoneProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/GetVerifiedPhoneIdentityByPhone"
	// PtfmAuthSvcChangeAccountPasswordProcedure is the fully-qualified name of the PtfmAuthSvc's
	// ChangeAccountPassword RPC.
	PtfmAuthSvcChangeAccountPasswordProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/ChangeAccountPassword"
	// PtfmAuthSvcSetAccountPasswordProcedure is the fully-qualified name of the PtfmAuthSvc's
	// SetAccountPassword RPC.
	PtfmAuthSvcSetAccountPasswordProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/SetAccountPassword"
	// PtfmAuthSvcCreateSessionWithEmailPasswordProcedure is the fully-qualified name of the
	// PtfmAuthSvc's CreateSessionWithEmailPassword RPC.
	PtfmAuthSvcCreateSessionWithEmailPasswordProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/CreateSessionWithEmailPassword"
	// PtfmAuthSvcCreateSessionWithPhonePasswordProcedure is the fully-qualified name of the
	// PtfmAuthSvc's CreateSessionWithPhonePassword RPC.
	PtfmAuthSvcCreateSessionWithPhonePasswordProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/CreateSessionWithPhonePassword"
	// PtfmAuthSvcDeleteSessionFromIDProcedure is the fully-qualified name of the PtfmAuthSvc's
	// DeleteSessionFromID RPC.
	PtfmAuthSvcDeleteSessionFromIDProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/DeleteSessionFromID"
	// PtfmAuthSvcGetSessionByIDProcedure is the fully-qualified name of the PtfmAuthSvc's
	// GetSessionByID RPC.
	PtfmAuthSvcGetSessionByIDProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/GetSessionByID"
	// PtfmAuthSvcGetSessionByTokenProcedure is the fully-qualified name of the PtfmAuthSvc's
	// GetSessionByToken RPC.
	PtfmAuthSvcGetSessionByTokenProcedure = "/services.ptfm.auth.svc.v1.PtfmAuthSvc/GetSessionByToken"
)

// PtfmAuthSvcClient is a client for the services.ptfm.auth.svc.v1.PtfmAuthSvc service.
type PtfmAuthSvcClient interface {
	CreateAccountWithEmail(context.Context, *connect_go.Request[v1.CreateAccountWithEmailRequest]) (*connect_go.Response[v1.CreateAccountWithEmailResponse], error)
	CreateAccountWithEmailPassword(context.Context, *connect_go.Request[v1.CreateAccountWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateAccountWithEmailPasswordResponse], error)
	CreateAccountWithPhone(context.Context, *connect_go.Request[v1.CreateAccountWithPhoneRequest]) (*connect_go.Response[v1.CreateAccountWithPhoneResponse], error)
	CreateAccountWithPhonePassword(context.Context, *connect_go.Request[v1.CreateAccountWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateAccountWithPhonePasswordResponse], error)
	SendIdentityVerificationCode(context.Context, *connect_go.Request[v1.SendIdentityVerificationCodeRequest]) (*connect_go.Response[v1.SendIdentityVerificationCodeResponse], error)
	VerifyIdentity(context.Context, *connect_go.Request[v1.VerifyIdentityRequest]) (*connect_go.Response[v1.VerifyIdentityResponse], error)
	CreateAccountWithSSO(context.Context, *connect_go.Request[v1.CreateAccountWithSSORequest]) (*connect_go.Response[v1.CreateAccountWithSSOResponse], error)
	GetAccountMFASetup(context.Context, *connect_go.Request[v1.GetAccountMFASetupRequest]) (*connect_go.Response[v1.GetAccountMFASetupResponse], error)
	EnableAccountMFA(context.Context, *connect_go.Request[v1.EnableAccountMFARequest]) (*connect_go.Response[v1.EnableAccountMFAResponse], error)
	DisableAccountMFA(context.Context, *connect_go.Request[v1.DisableAccountMFARequest]) (*connect_go.Response[v1.DisableAccountMFAResponse], error)
	GetAccountByID(context.Context, *connect_go.Request[v1.GetAccountByIDRequest]) (*connect_go.Response[v1.GetAccountByIDResponse], error)
	GetAccountByIdentityID(context.Context, *connect_go.Request[v1.GetAccountByIdentityIDRequest]) (*connect_go.Response[v1.GetAccountByIdentityIDResponse], error)
	GetAccountByEmail(context.Context, *connect_go.Request[v1.GetAccountByEmailRequest]) (*connect_go.Response[v1.GetAccountByEmailResponse], error)
	GetAccountByPhone(context.Context, *connect_go.Request[v1.GetAccountByPhoneRequest]) (*connect_go.Response[v1.GetAccountByPhoneResponse], error)
	GetVerifiedEmailIdentityByEmail(context.Context, *connect_go.Request[v1.GetVerifiedEmailIdentityByEmailRequest]) (*connect_go.Response[v1.GetVerifiedEmailIdentityByEmailResponse], error)
	GetVerifiedPhoneIdentityByPhone(context.Context, *connect_go.Request[v1.GetVerifiedPhoneIdentityByPhoneRequest]) (*connect_go.Response[v1.GetVerifiedPhoneIdentityByPhoneResponse], error)
	ChangeAccountPassword(context.Context, *connect_go.Request[v1.ChangeAccountPasswordRequest]) (*connect_go.Response[v1.ChangeAccountPasswordResponse], error)
	SetAccountPassword(context.Context, *connect_go.Request[v1.SetAccountPasswordRequest]) (*connect_go.Response[v1.SetAccountPasswordResponse], error)
	CreateSessionWithEmailPassword(context.Context, *connect_go.Request[v1.CreateSessionWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateSessionWithEmailPasswordResponse], error)
	CreateSessionWithPhonePassword(context.Context, *connect_go.Request[v1.CreateSessionWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateSessionWithPhonePasswordResponse], error)
	DeleteSessionFromID(context.Context, *connect_go.Request[v1.DeleteSessionFromIDRequest]) (*connect_go.Response[v1.DeleteSessionFromIDResponse], error)
	GetSessionByID(context.Context, *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error)
	GetSessionByToken(context.Context, *connect_go.Request[v1.GetSessionByTokenRequest]) (*connect_go.Response[v1.GetSessionByTokenResponse], error)
}

// NewPtfmAuthSvcClient constructs a client for the services.ptfm.auth.svc.v1.PtfmAuthSvc service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPtfmAuthSvcClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PtfmAuthSvcClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ptfmAuthSvcClient{
		createAccountWithEmail: connect_go.NewClient[v1.CreateAccountWithEmailRequest, v1.CreateAccountWithEmailResponse](
			httpClient,
			baseURL+PtfmAuthSvcCreateAccountWithEmailProcedure,
			opts...,
		),
		createAccountWithEmailPassword: connect_go.NewClient[v1.CreateAccountWithEmailPasswordRequest, v1.CreateAccountWithEmailPasswordResponse](
			httpClient,
			baseURL+PtfmAuthSvcCreateAccountWithEmailPasswordProcedure,
			opts...,
		),
		createAccountWithPhone: connect_go.NewClient[v1.CreateAccountWithPhoneRequest, v1.CreateAccountWithPhoneResponse](
			httpClient,
			baseURL+PtfmAuthSvcCreateAccountWithPhoneProcedure,
			opts...,
		),
		createAccountWithPhonePassword: connect_go.NewClient[v1.CreateAccountWithPhonePasswordRequest, v1.CreateAccountWithPhonePasswordResponse](
			httpClient,
			baseURL+PtfmAuthSvcCreateAccountWithPhonePasswordProcedure,
			opts...,
		),
		sendIdentityVerificationCode: connect_go.NewClient[v1.SendIdentityVerificationCodeRequest, v1.SendIdentityVerificationCodeResponse](
			httpClient,
			baseURL+PtfmAuthSvcSendIdentityVerificationCodeProcedure,
			opts...,
		),
		verifyIdentity: connect_go.NewClient[v1.VerifyIdentityRequest, v1.VerifyIdentityResponse](
			httpClient,
			baseURL+PtfmAuthSvcVerifyIdentityProcedure,
			opts...,
		),
		createAccountWithSSO: connect_go.NewClient[v1.CreateAccountWithSSORequest, v1.CreateAccountWithSSOResponse](
			httpClient,
			baseURL+PtfmAuthSvcCreateAccountWithSSOProcedure,
			opts...,
		),
		getAccountMFASetup: connect_go.NewClient[v1.GetAccountMFASetupRequest, v1.GetAccountMFASetupResponse](
			httpClient,
			baseURL+PtfmAuthSvcGetAccountMFASetupProcedure,
			opts...,
		),
		enableAccountMFA: connect_go.NewClient[v1.EnableAccountMFARequest, v1.EnableAccountMFAResponse](
			httpClient,
			baseURL+PtfmAuthSvcEnableAccountMFAProcedure,
			opts...,
		),
		disableAccountMFA: connect_go.NewClient[v1.DisableAccountMFARequest, v1.DisableAccountMFAResponse](
			httpClient,
			baseURL+PtfmAuthSvcDisableAccountMFAProcedure,
			opts...,
		),
		getAccountByID: connect_go.NewClient[v1.GetAccountByIDRequest, v1.GetAccountByIDResponse](
			httpClient,
			baseURL+PtfmAuthSvcGetAccountByIDProcedure,
			opts...,
		),
		getAccountByIdentityID: connect_go.NewClient[v1.GetAccountByIdentityIDRequest, v1.GetAccountByIdentityIDResponse](
			httpClient,
			baseURL+PtfmAuthSvcGetAccountByIdentityIDProcedure,
			opts...,
		),
		getAccountByEmail: connect_go.NewClient[v1.GetAccountByEmailRequest, v1.GetAccountByEmailResponse](
			httpClient,
			baseURL+PtfmAuthSvcGetAccountByEmailProcedure,
			opts...,
		),
		getAccountByPhone: connect_go.NewClient[v1.GetAccountByPhoneRequest, v1.GetAccountByPhoneResponse](
			httpClient,
			baseURL+PtfmAuthSvcGetAccountByPhoneProcedure,
			opts...,
		),
		getVerifiedEmailIdentityByEmail: connect_go.NewClient[v1.GetVerifiedEmailIdentityByEmailRequest, v1.GetVerifiedEmailIdentityByEmailResponse](
			httpClient,
			baseURL+PtfmAuthSvcGetVerifiedEmailIdentityByEmailProcedure,
			opts...,
		),
		getVerifiedPhoneIdentityByPhone: connect_go.NewClient[v1.GetVerifiedPhoneIdentityByPhoneRequest, v1.GetVerifiedPhoneIdentityByPhoneResponse](
			httpClient,
			baseURL+PtfmAuthSvcGetVerifiedPhoneIdentityByPhoneProcedure,
			opts...,
		),
		changeAccountPassword: connect_go.NewClient[v1.ChangeAccountPasswordRequest, v1.ChangeAccountPasswordResponse](
			httpClient,
			baseURL+PtfmAuthSvcChangeAccountPasswordProcedure,
			opts...,
		),
		setAccountPassword: connect_go.NewClient[v1.SetAccountPasswordRequest, v1.SetAccountPasswordResponse](
			httpClient,
			baseURL+PtfmAuthSvcSetAccountPasswordProcedure,
			opts...,
		),
		createSessionWithEmailPassword: connect_go.NewClient[v1.CreateSessionWithEmailPasswordRequest, v1.CreateSessionWithEmailPasswordResponse](
			httpClient,
			baseURL+PtfmAuthSvcCreateSessionWithEmailPasswordProcedure,
			opts...,
		),
		createSessionWithPhonePassword: connect_go.NewClient[v1.CreateSessionWithPhonePasswordRequest, v1.CreateSessionWithPhonePasswordResponse](
			httpClient,
			baseURL+PtfmAuthSvcCreateSessionWithPhonePasswordProcedure,
			opts...,
		),
		deleteSessionFromID: connect_go.NewClient[v1.DeleteSessionFromIDRequest, v1.DeleteSessionFromIDResponse](
			httpClient,
			baseURL+PtfmAuthSvcDeleteSessionFromIDProcedure,
			opts...,
		),
		getSessionByID: connect_go.NewClient[v1.GetSessionByIDRequest, v1.GetSessionByIDResponse](
			httpClient,
			baseURL+PtfmAuthSvcGetSessionByIDProcedure,
			opts...,
		),
		getSessionByToken: connect_go.NewClient[v1.GetSessionByTokenRequest, v1.GetSessionByTokenResponse](
			httpClient,
			baseURL+PtfmAuthSvcGetSessionByTokenProcedure,
			opts...,
		),
	}
}

// ptfmAuthSvcClient implements PtfmAuthSvcClient.
type ptfmAuthSvcClient struct {
	createAccountWithEmail          *connect_go.Client[v1.CreateAccountWithEmailRequest, v1.CreateAccountWithEmailResponse]
	createAccountWithEmailPassword  *connect_go.Client[v1.CreateAccountWithEmailPasswordRequest, v1.CreateAccountWithEmailPasswordResponse]
	createAccountWithPhone          *connect_go.Client[v1.CreateAccountWithPhoneRequest, v1.CreateAccountWithPhoneResponse]
	createAccountWithPhonePassword  *connect_go.Client[v1.CreateAccountWithPhonePasswordRequest, v1.CreateAccountWithPhonePasswordResponse]
	sendIdentityVerificationCode    *connect_go.Client[v1.SendIdentityVerificationCodeRequest, v1.SendIdentityVerificationCodeResponse]
	verifyIdentity                  *connect_go.Client[v1.VerifyIdentityRequest, v1.VerifyIdentityResponse]
	createAccountWithSSO            *connect_go.Client[v1.CreateAccountWithSSORequest, v1.CreateAccountWithSSOResponse]
	getAccountMFASetup              *connect_go.Client[v1.GetAccountMFASetupRequest, v1.GetAccountMFASetupResponse]
	enableAccountMFA                *connect_go.Client[v1.EnableAccountMFARequest, v1.EnableAccountMFAResponse]
	disableAccountMFA               *connect_go.Client[v1.DisableAccountMFARequest, v1.DisableAccountMFAResponse]
	getAccountByID                  *connect_go.Client[v1.GetAccountByIDRequest, v1.GetAccountByIDResponse]
	getAccountByIdentityID          *connect_go.Client[v1.GetAccountByIdentityIDRequest, v1.GetAccountByIdentityIDResponse]
	getAccountByEmail               *connect_go.Client[v1.GetAccountByEmailRequest, v1.GetAccountByEmailResponse]
	getAccountByPhone               *connect_go.Client[v1.GetAccountByPhoneRequest, v1.GetAccountByPhoneResponse]
	getVerifiedEmailIdentityByEmail *connect_go.Client[v1.GetVerifiedEmailIdentityByEmailRequest, v1.GetVerifiedEmailIdentityByEmailResponse]
	getVerifiedPhoneIdentityByPhone *connect_go.Client[v1.GetVerifiedPhoneIdentityByPhoneRequest, v1.GetVerifiedPhoneIdentityByPhoneResponse]
	changeAccountPassword           *connect_go.Client[v1.ChangeAccountPasswordRequest, v1.ChangeAccountPasswordResponse]
	setAccountPassword              *connect_go.Client[v1.SetAccountPasswordRequest, v1.SetAccountPasswordResponse]
	createSessionWithEmailPassword  *connect_go.Client[v1.CreateSessionWithEmailPasswordRequest, v1.CreateSessionWithEmailPasswordResponse]
	createSessionWithPhonePassword  *connect_go.Client[v1.CreateSessionWithPhonePasswordRequest, v1.CreateSessionWithPhonePasswordResponse]
	deleteSessionFromID             *connect_go.Client[v1.DeleteSessionFromIDRequest, v1.DeleteSessionFromIDResponse]
	getSessionByID                  *connect_go.Client[v1.GetSessionByIDRequest, v1.GetSessionByIDResponse]
	getSessionByToken               *connect_go.Client[v1.GetSessionByTokenRequest, v1.GetSessionByTokenResponse]
}

// CreateAccountWithEmail calls services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithEmail.
func (c *ptfmAuthSvcClient) CreateAccountWithEmail(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithEmailRequest]) (*connect_go.Response[v1.CreateAccountWithEmailResponse], error) {
	return c.createAccountWithEmail.CallUnary(ctx, req)
}

// CreateAccountWithEmailPassword calls
// services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithEmailPassword.
func (c *ptfmAuthSvcClient) CreateAccountWithEmailPassword(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateAccountWithEmailPasswordResponse], error) {
	return c.createAccountWithEmailPassword.CallUnary(ctx, req)
}

// CreateAccountWithPhone calls services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithPhone.
func (c *ptfmAuthSvcClient) CreateAccountWithPhone(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithPhoneRequest]) (*connect_go.Response[v1.CreateAccountWithPhoneResponse], error) {
	return c.createAccountWithPhone.CallUnary(ctx, req)
}

// CreateAccountWithPhonePassword calls
// services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithPhonePassword.
func (c *ptfmAuthSvcClient) CreateAccountWithPhonePassword(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateAccountWithPhonePasswordResponse], error) {
	return c.createAccountWithPhonePassword.CallUnary(ctx, req)
}

// SendIdentityVerificationCode calls
// services.ptfm.auth.svc.v1.PtfmAuthSvc.SendIdentityVerificationCode.
func (c *ptfmAuthSvcClient) SendIdentityVerificationCode(ctx context.Context, req *connect_go.Request[v1.SendIdentityVerificationCodeRequest]) (*connect_go.Response[v1.SendIdentityVerificationCodeResponse], error) {
	return c.sendIdentityVerificationCode.CallUnary(ctx, req)
}

// VerifyIdentity calls services.ptfm.auth.svc.v1.PtfmAuthSvc.VerifyIdentity.
func (c *ptfmAuthSvcClient) VerifyIdentity(ctx context.Context, req *connect_go.Request[v1.VerifyIdentityRequest]) (*connect_go.Response[v1.VerifyIdentityResponse], error) {
	return c.verifyIdentity.CallUnary(ctx, req)
}

// CreateAccountWithSSO calls services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithSSO.
func (c *ptfmAuthSvcClient) CreateAccountWithSSO(ctx context.Context, req *connect_go.Request[v1.CreateAccountWithSSORequest]) (*connect_go.Response[v1.CreateAccountWithSSOResponse], error) {
	return c.createAccountWithSSO.CallUnary(ctx, req)
}

// GetAccountMFASetup calls services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountMFASetup.
func (c *ptfmAuthSvcClient) GetAccountMFASetup(ctx context.Context, req *connect_go.Request[v1.GetAccountMFASetupRequest]) (*connect_go.Response[v1.GetAccountMFASetupResponse], error) {
	return c.getAccountMFASetup.CallUnary(ctx, req)
}

// EnableAccountMFA calls services.ptfm.auth.svc.v1.PtfmAuthSvc.EnableAccountMFA.
func (c *ptfmAuthSvcClient) EnableAccountMFA(ctx context.Context, req *connect_go.Request[v1.EnableAccountMFARequest]) (*connect_go.Response[v1.EnableAccountMFAResponse], error) {
	return c.enableAccountMFA.CallUnary(ctx, req)
}

// DisableAccountMFA calls services.ptfm.auth.svc.v1.PtfmAuthSvc.DisableAccountMFA.
func (c *ptfmAuthSvcClient) DisableAccountMFA(ctx context.Context, req *connect_go.Request[v1.DisableAccountMFARequest]) (*connect_go.Response[v1.DisableAccountMFAResponse], error) {
	return c.disableAccountMFA.CallUnary(ctx, req)
}

// GetAccountByID calls services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountByID.
func (c *ptfmAuthSvcClient) GetAccountByID(ctx context.Context, req *connect_go.Request[v1.GetAccountByIDRequest]) (*connect_go.Response[v1.GetAccountByIDResponse], error) {
	return c.getAccountByID.CallUnary(ctx, req)
}

// GetAccountByIdentityID calls services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountByIdentityID.
func (c *ptfmAuthSvcClient) GetAccountByIdentityID(ctx context.Context, req *connect_go.Request[v1.GetAccountByIdentityIDRequest]) (*connect_go.Response[v1.GetAccountByIdentityIDResponse], error) {
	return c.getAccountByIdentityID.CallUnary(ctx, req)
}

// GetAccountByEmail calls services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountByEmail.
func (c *ptfmAuthSvcClient) GetAccountByEmail(ctx context.Context, req *connect_go.Request[v1.GetAccountByEmailRequest]) (*connect_go.Response[v1.GetAccountByEmailResponse], error) {
	return c.getAccountByEmail.CallUnary(ctx, req)
}

// GetAccountByPhone calls services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountByPhone.
func (c *ptfmAuthSvcClient) GetAccountByPhone(ctx context.Context, req *connect_go.Request[v1.GetAccountByPhoneRequest]) (*connect_go.Response[v1.GetAccountByPhoneResponse], error) {
	return c.getAccountByPhone.CallUnary(ctx, req)
}

// GetVerifiedEmailIdentityByEmail calls
// services.ptfm.auth.svc.v1.PtfmAuthSvc.GetVerifiedEmailIdentityByEmail.
func (c *ptfmAuthSvcClient) GetVerifiedEmailIdentityByEmail(ctx context.Context, req *connect_go.Request[v1.GetVerifiedEmailIdentityByEmailRequest]) (*connect_go.Response[v1.GetVerifiedEmailIdentityByEmailResponse], error) {
	return c.getVerifiedEmailIdentityByEmail.CallUnary(ctx, req)
}

// GetVerifiedPhoneIdentityByPhone calls
// services.ptfm.auth.svc.v1.PtfmAuthSvc.GetVerifiedPhoneIdentityByPhone.
func (c *ptfmAuthSvcClient) GetVerifiedPhoneIdentityByPhone(ctx context.Context, req *connect_go.Request[v1.GetVerifiedPhoneIdentityByPhoneRequest]) (*connect_go.Response[v1.GetVerifiedPhoneIdentityByPhoneResponse], error) {
	return c.getVerifiedPhoneIdentityByPhone.CallUnary(ctx, req)
}

// ChangeAccountPassword calls services.ptfm.auth.svc.v1.PtfmAuthSvc.ChangeAccountPassword.
func (c *ptfmAuthSvcClient) ChangeAccountPassword(ctx context.Context, req *connect_go.Request[v1.ChangeAccountPasswordRequest]) (*connect_go.Response[v1.ChangeAccountPasswordResponse], error) {
	return c.changeAccountPassword.CallUnary(ctx, req)
}

// SetAccountPassword calls services.ptfm.auth.svc.v1.PtfmAuthSvc.SetAccountPassword.
func (c *ptfmAuthSvcClient) SetAccountPassword(ctx context.Context, req *connect_go.Request[v1.SetAccountPasswordRequest]) (*connect_go.Response[v1.SetAccountPasswordResponse], error) {
	return c.setAccountPassword.CallUnary(ctx, req)
}

// CreateSessionWithEmailPassword calls
// services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateSessionWithEmailPassword.
func (c *ptfmAuthSvcClient) CreateSessionWithEmailPassword(ctx context.Context, req *connect_go.Request[v1.CreateSessionWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateSessionWithEmailPasswordResponse], error) {
	return c.createSessionWithEmailPassword.CallUnary(ctx, req)
}

// CreateSessionWithPhonePassword calls
// services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateSessionWithPhonePassword.
func (c *ptfmAuthSvcClient) CreateSessionWithPhonePassword(ctx context.Context, req *connect_go.Request[v1.CreateSessionWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateSessionWithPhonePasswordResponse], error) {
	return c.createSessionWithPhonePassword.CallUnary(ctx, req)
}

// DeleteSessionFromID calls services.ptfm.auth.svc.v1.PtfmAuthSvc.DeleteSessionFromID.
func (c *ptfmAuthSvcClient) DeleteSessionFromID(ctx context.Context, req *connect_go.Request[v1.DeleteSessionFromIDRequest]) (*connect_go.Response[v1.DeleteSessionFromIDResponse], error) {
	return c.deleteSessionFromID.CallUnary(ctx, req)
}

// GetSessionByID calls services.ptfm.auth.svc.v1.PtfmAuthSvc.GetSessionByID.
func (c *ptfmAuthSvcClient) GetSessionByID(ctx context.Context, req *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error) {
	return c.getSessionByID.CallUnary(ctx, req)
}

// GetSessionByToken calls services.ptfm.auth.svc.v1.PtfmAuthSvc.GetSessionByToken.
func (c *ptfmAuthSvcClient) GetSessionByToken(ctx context.Context, req *connect_go.Request[v1.GetSessionByTokenRequest]) (*connect_go.Response[v1.GetSessionByTokenResponse], error) {
	return c.getSessionByToken.CallUnary(ctx, req)
}

// PtfmAuthSvcHandler is an implementation of the services.ptfm.auth.svc.v1.PtfmAuthSvc service.
type PtfmAuthSvcHandler interface {
	CreateAccountWithEmail(context.Context, *connect_go.Request[v1.CreateAccountWithEmailRequest]) (*connect_go.Response[v1.CreateAccountWithEmailResponse], error)
	CreateAccountWithEmailPassword(context.Context, *connect_go.Request[v1.CreateAccountWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateAccountWithEmailPasswordResponse], error)
	CreateAccountWithPhone(context.Context, *connect_go.Request[v1.CreateAccountWithPhoneRequest]) (*connect_go.Response[v1.CreateAccountWithPhoneResponse], error)
	CreateAccountWithPhonePassword(context.Context, *connect_go.Request[v1.CreateAccountWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateAccountWithPhonePasswordResponse], error)
	SendIdentityVerificationCode(context.Context, *connect_go.Request[v1.SendIdentityVerificationCodeRequest]) (*connect_go.Response[v1.SendIdentityVerificationCodeResponse], error)
	VerifyIdentity(context.Context, *connect_go.Request[v1.VerifyIdentityRequest]) (*connect_go.Response[v1.VerifyIdentityResponse], error)
	CreateAccountWithSSO(context.Context, *connect_go.Request[v1.CreateAccountWithSSORequest]) (*connect_go.Response[v1.CreateAccountWithSSOResponse], error)
	GetAccountMFASetup(context.Context, *connect_go.Request[v1.GetAccountMFASetupRequest]) (*connect_go.Response[v1.GetAccountMFASetupResponse], error)
	EnableAccountMFA(context.Context, *connect_go.Request[v1.EnableAccountMFARequest]) (*connect_go.Response[v1.EnableAccountMFAResponse], error)
	DisableAccountMFA(context.Context, *connect_go.Request[v1.DisableAccountMFARequest]) (*connect_go.Response[v1.DisableAccountMFAResponse], error)
	GetAccountByID(context.Context, *connect_go.Request[v1.GetAccountByIDRequest]) (*connect_go.Response[v1.GetAccountByIDResponse], error)
	GetAccountByIdentityID(context.Context, *connect_go.Request[v1.GetAccountByIdentityIDRequest]) (*connect_go.Response[v1.GetAccountByIdentityIDResponse], error)
	GetAccountByEmail(context.Context, *connect_go.Request[v1.GetAccountByEmailRequest]) (*connect_go.Response[v1.GetAccountByEmailResponse], error)
	GetAccountByPhone(context.Context, *connect_go.Request[v1.GetAccountByPhoneRequest]) (*connect_go.Response[v1.GetAccountByPhoneResponse], error)
	GetVerifiedEmailIdentityByEmail(context.Context, *connect_go.Request[v1.GetVerifiedEmailIdentityByEmailRequest]) (*connect_go.Response[v1.GetVerifiedEmailIdentityByEmailResponse], error)
	GetVerifiedPhoneIdentityByPhone(context.Context, *connect_go.Request[v1.GetVerifiedPhoneIdentityByPhoneRequest]) (*connect_go.Response[v1.GetVerifiedPhoneIdentityByPhoneResponse], error)
	ChangeAccountPassword(context.Context, *connect_go.Request[v1.ChangeAccountPasswordRequest]) (*connect_go.Response[v1.ChangeAccountPasswordResponse], error)
	SetAccountPassword(context.Context, *connect_go.Request[v1.SetAccountPasswordRequest]) (*connect_go.Response[v1.SetAccountPasswordResponse], error)
	CreateSessionWithEmailPassword(context.Context, *connect_go.Request[v1.CreateSessionWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateSessionWithEmailPasswordResponse], error)
	CreateSessionWithPhonePassword(context.Context, *connect_go.Request[v1.CreateSessionWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateSessionWithPhonePasswordResponse], error)
	DeleteSessionFromID(context.Context, *connect_go.Request[v1.DeleteSessionFromIDRequest]) (*connect_go.Response[v1.DeleteSessionFromIDResponse], error)
	GetSessionByID(context.Context, *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error)
	GetSessionByToken(context.Context, *connect_go.Request[v1.GetSessionByTokenRequest]) (*connect_go.Response[v1.GetSessionByTokenResponse], error)
}

// NewPtfmAuthSvcHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPtfmAuthSvcHandler(svc PtfmAuthSvcHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	ptfmAuthSvcCreateAccountWithEmailHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcCreateAccountWithEmailProcedure,
		svc.CreateAccountWithEmail,
		opts...,
	)
	ptfmAuthSvcCreateAccountWithEmailPasswordHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcCreateAccountWithEmailPasswordProcedure,
		svc.CreateAccountWithEmailPassword,
		opts...,
	)
	ptfmAuthSvcCreateAccountWithPhoneHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcCreateAccountWithPhoneProcedure,
		svc.CreateAccountWithPhone,
		opts...,
	)
	ptfmAuthSvcCreateAccountWithPhonePasswordHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcCreateAccountWithPhonePasswordProcedure,
		svc.CreateAccountWithPhonePassword,
		opts...,
	)
	ptfmAuthSvcSendIdentityVerificationCodeHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcSendIdentityVerificationCodeProcedure,
		svc.SendIdentityVerificationCode,
		opts...,
	)
	ptfmAuthSvcVerifyIdentityHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcVerifyIdentityProcedure,
		svc.VerifyIdentity,
		opts...,
	)
	ptfmAuthSvcCreateAccountWithSSOHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcCreateAccountWithSSOProcedure,
		svc.CreateAccountWithSSO,
		opts...,
	)
	ptfmAuthSvcGetAccountMFASetupHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcGetAccountMFASetupProcedure,
		svc.GetAccountMFASetup,
		opts...,
	)
	ptfmAuthSvcEnableAccountMFAHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcEnableAccountMFAProcedure,
		svc.EnableAccountMFA,
		opts...,
	)
	ptfmAuthSvcDisableAccountMFAHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcDisableAccountMFAProcedure,
		svc.DisableAccountMFA,
		opts...,
	)
	ptfmAuthSvcGetAccountByIDHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcGetAccountByIDProcedure,
		svc.GetAccountByID,
		opts...,
	)
	ptfmAuthSvcGetAccountByIdentityIDHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcGetAccountByIdentityIDProcedure,
		svc.GetAccountByIdentityID,
		opts...,
	)
	ptfmAuthSvcGetAccountByEmailHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcGetAccountByEmailProcedure,
		svc.GetAccountByEmail,
		opts...,
	)
	ptfmAuthSvcGetAccountByPhoneHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcGetAccountByPhoneProcedure,
		svc.GetAccountByPhone,
		opts...,
	)
	ptfmAuthSvcGetVerifiedEmailIdentityByEmailHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcGetVerifiedEmailIdentityByEmailProcedure,
		svc.GetVerifiedEmailIdentityByEmail,
		opts...,
	)
	ptfmAuthSvcGetVerifiedPhoneIdentityByPhoneHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcGetVerifiedPhoneIdentityByPhoneProcedure,
		svc.GetVerifiedPhoneIdentityByPhone,
		opts...,
	)
	ptfmAuthSvcChangeAccountPasswordHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcChangeAccountPasswordProcedure,
		svc.ChangeAccountPassword,
		opts...,
	)
	ptfmAuthSvcSetAccountPasswordHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcSetAccountPasswordProcedure,
		svc.SetAccountPassword,
		opts...,
	)
	ptfmAuthSvcCreateSessionWithEmailPasswordHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcCreateSessionWithEmailPasswordProcedure,
		svc.CreateSessionWithEmailPassword,
		opts...,
	)
	ptfmAuthSvcCreateSessionWithPhonePasswordHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcCreateSessionWithPhonePasswordProcedure,
		svc.CreateSessionWithPhonePassword,
		opts...,
	)
	ptfmAuthSvcDeleteSessionFromIDHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcDeleteSessionFromIDProcedure,
		svc.DeleteSessionFromID,
		opts...,
	)
	ptfmAuthSvcGetSessionByIDHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcGetSessionByIDProcedure,
		svc.GetSessionByID,
		opts...,
	)
	ptfmAuthSvcGetSessionByTokenHandler := connect_go.NewUnaryHandler(
		PtfmAuthSvcGetSessionByTokenProcedure,
		svc.GetSessionByToken,
		opts...,
	)
	return "/services.ptfm.auth.svc.v1.PtfmAuthSvc/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PtfmAuthSvcCreateAccountWithEmailProcedure:
			ptfmAuthSvcCreateAccountWithEmailHandler.ServeHTTP(w, r)
		case PtfmAuthSvcCreateAccountWithEmailPasswordProcedure:
			ptfmAuthSvcCreateAccountWithEmailPasswordHandler.ServeHTTP(w, r)
		case PtfmAuthSvcCreateAccountWithPhoneProcedure:
			ptfmAuthSvcCreateAccountWithPhoneHandler.ServeHTTP(w, r)
		case PtfmAuthSvcCreateAccountWithPhonePasswordProcedure:
			ptfmAuthSvcCreateAccountWithPhonePasswordHandler.ServeHTTP(w, r)
		case PtfmAuthSvcSendIdentityVerificationCodeProcedure:
			ptfmAuthSvcSendIdentityVerificationCodeHandler.ServeHTTP(w, r)
		case PtfmAuthSvcVerifyIdentityProcedure:
			ptfmAuthSvcVerifyIdentityHandler.ServeHTTP(w, r)
		case PtfmAuthSvcCreateAccountWithSSOProcedure:
			ptfmAuthSvcCreateAccountWithSSOHandler.ServeHTTP(w, r)
		case PtfmAuthSvcGetAccountMFASetupProcedure:
			ptfmAuthSvcGetAccountMFASetupHandler.ServeHTTP(w, r)
		case PtfmAuthSvcEnableAccountMFAProcedure:
			ptfmAuthSvcEnableAccountMFAHandler.ServeHTTP(w, r)
		case PtfmAuthSvcDisableAccountMFAProcedure:
			ptfmAuthSvcDisableAccountMFAHandler.ServeHTTP(w, r)
		case PtfmAuthSvcGetAccountByIDProcedure:
			ptfmAuthSvcGetAccountByIDHandler.ServeHTTP(w, r)
		case PtfmAuthSvcGetAccountByIdentityIDProcedure:
			ptfmAuthSvcGetAccountByIdentityIDHandler.ServeHTTP(w, r)
		case PtfmAuthSvcGetAccountByEmailProcedure:
			ptfmAuthSvcGetAccountByEmailHandler.ServeHTTP(w, r)
		case PtfmAuthSvcGetAccountByPhoneProcedure:
			ptfmAuthSvcGetAccountByPhoneHandler.ServeHTTP(w, r)
		case PtfmAuthSvcGetVerifiedEmailIdentityByEmailProcedure:
			ptfmAuthSvcGetVerifiedEmailIdentityByEmailHandler.ServeHTTP(w, r)
		case PtfmAuthSvcGetVerifiedPhoneIdentityByPhoneProcedure:
			ptfmAuthSvcGetVerifiedPhoneIdentityByPhoneHandler.ServeHTTP(w, r)
		case PtfmAuthSvcChangeAccountPasswordProcedure:
			ptfmAuthSvcChangeAccountPasswordHandler.ServeHTTP(w, r)
		case PtfmAuthSvcSetAccountPasswordProcedure:
			ptfmAuthSvcSetAccountPasswordHandler.ServeHTTP(w, r)
		case PtfmAuthSvcCreateSessionWithEmailPasswordProcedure:
			ptfmAuthSvcCreateSessionWithEmailPasswordHandler.ServeHTTP(w, r)
		case PtfmAuthSvcCreateSessionWithPhonePasswordProcedure:
			ptfmAuthSvcCreateSessionWithPhonePasswordHandler.ServeHTTP(w, r)
		case PtfmAuthSvcDeleteSessionFromIDProcedure:
			ptfmAuthSvcDeleteSessionFromIDHandler.ServeHTTP(w, r)
		case PtfmAuthSvcGetSessionByIDProcedure:
			ptfmAuthSvcGetSessionByIDHandler.ServeHTTP(w, r)
		case PtfmAuthSvcGetSessionByTokenProcedure:
			ptfmAuthSvcGetSessionByTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPtfmAuthSvcHandler returns CodeUnimplemented from all methods.
type UnimplementedPtfmAuthSvcHandler struct{}

func (UnimplementedPtfmAuthSvcHandler) CreateAccountWithEmail(context.Context, *connect_go.Request[v1.CreateAccountWithEmailRequest]) (*connect_go.Response[v1.CreateAccountWithEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithEmail is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) CreateAccountWithEmailPassword(context.Context, *connect_go.Request[v1.CreateAccountWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateAccountWithEmailPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithEmailPassword is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) CreateAccountWithPhone(context.Context, *connect_go.Request[v1.CreateAccountWithPhoneRequest]) (*connect_go.Response[v1.CreateAccountWithPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithPhone is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) CreateAccountWithPhonePassword(context.Context, *connect_go.Request[v1.CreateAccountWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateAccountWithPhonePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithPhonePassword is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) SendIdentityVerificationCode(context.Context, *connect_go.Request[v1.SendIdentityVerificationCodeRequest]) (*connect_go.Response[v1.SendIdentityVerificationCodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.SendIdentityVerificationCode is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) VerifyIdentity(context.Context, *connect_go.Request[v1.VerifyIdentityRequest]) (*connect_go.Response[v1.VerifyIdentityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.VerifyIdentity is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) CreateAccountWithSSO(context.Context, *connect_go.Request[v1.CreateAccountWithSSORequest]) (*connect_go.Response[v1.CreateAccountWithSSOResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateAccountWithSSO is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) GetAccountMFASetup(context.Context, *connect_go.Request[v1.GetAccountMFASetupRequest]) (*connect_go.Response[v1.GetAccountMFASetupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountMFASetup is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) EnableAccountMFA(context.Context, *connect_go.Request[v1.EnableAccountMFARequest]) (*connect_go.Response[v1.EnableAccountMFAResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.EnableAccountMFA is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) DisableAccountMFA(context.Context, *connect_go.Request[v1.DisableAccountMFARequest]) (*connect_go.Response[v1.DisableAccountMFAResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.DisableAccountMFA is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) GetAccountByID(context.Context, *connect_go.Request[v1.GetAccountByIDRequest]) (*connect_go.Response[v1.GetAccountByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountByID is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) GetAccountByIdentityID(context.Context, *connect_go.Request[v1.GetAccountByIdentityIDRequest]) (*connect_go.Response[v1.GetAccountByIdentityIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountByIdentityID is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) GetAccountByEmail(context.Context, *connect_go.Request[v1.GetAccountByEmailRequest]) (*connect_go.Response[v1.GetAccountByEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountByEmail is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) GetAccountByPhone(context.Context, *connect_go.Request[v1.GetAccountByPhoneRequest]) (*connect_go.Response[v1.GetAccountByPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.GetAccountByPhone is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) GetVerifiedEmailIdentityByEmail(context.Context, *connect_go.Request[v1.GetVerifiedEmailIdentityByEmailRequest]) (*connect_go.Response[v1.GetVerifiedEmailIdentityByEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.GetVerifiedEmailIdentityByEmail is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) GetVerifiedPhoneIdentityByPhone(context.Context, *connect_go.Request[v1.GetVerifiedPhoneIdentityByPhoneRequest]) (*connect_go.Response[v1.GetVerifiedPhoneIdentityByPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.GetVerifiedPhoneIdentityByPhone is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) ChangeAccountPassword(context.Context, *connect_go.Request[v1.ChangeAccountPasswordRequest]) (*connect_go.Response[v1.ChangeAccountPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.ChangeAccountPassword is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) SetAccountPassword(context.Context, *connect_go.Request[v1.SetAccountPasswordRequest]) (*connect_go.Response[v1.SetAccountPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.SetAccountPassword is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) CreateSessionWithEmailPassword(context.Context, *connect_go.Request[v1.CreateSessionWithEmailPasswordRequest]) (*connect_go.Response[v1.CreateSessionWithEmailPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateSessionWithEmailPassword is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) CreateSessionWithPhonePassword(context.Context, *connect_go.Request[v1.CreateSessionWithPhonePasswordRequest]) (*connect_go.Response[v1.CreateSessionWithPhonePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.CreateSessionWithPhonePassword is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) DeleteSessionFromID(context.Context, *connect_go.Request[v1.DeleteSessionFromIDRequest]) (*connect_go.Response[v1.DeleteSessionFromIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.DeleteSessionFromID is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) GetSessionByID(context.Context, *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.GetSessionByID is not implemented"))
}

func (UnimplementedPtfmAuthSvcHandler) GetSessionByToken(context.Context, *connect_go.Request[v1.GetSessionByTokenRequest]) (*connect_go.Response[v1.GetSessionByTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.auth.svc.v1.PtfmAuthSvc.GetSessionByToken is not implemented"))
}
